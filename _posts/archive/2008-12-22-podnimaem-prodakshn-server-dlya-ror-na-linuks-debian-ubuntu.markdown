---
layout: post
title: Поднимаем продакшн сервер для ROR на Линукс (Debian, Ubuntu)
wordpress_id: 626
wordpress_url: http://leopard.in.ua/?p=626
categories:
- Ruby
- Linux
- Ruby on Rails
- nginx
- ubuntu
tags: []
---
Итак, разработали мы сайт на Ruby on Rails. Пора запустить его в свободное плаванье (в продакшан). Для этого будем использовать:Debian (Ubuntu) - Линукс система на сервере,[nginx](http://www.sysoev.ru/nginx/) — это HTTP-сервер и IMAP/POP3-прокси сервер. Отлично справляется с высокими нагрузками.[Mongrel](http://mongrel.rubyforge.org/index.html) - это быстрая HTTP-библиотека и сервер для Ruby, предназначенные для хостинга Ruby веб-приложений и использующая HTTP вместо FastCGI или SGI.[Mongrel_cluster](http://rubyforge.org/projects/railsmachine/) - Gem плагин, предназначенный для упрощения развертывания веб приложений, использующих кластер Mongrel серверов.<!--more-->Понятное дело надо установить ruby, rails, mongrel, mongrel-cluster:<pre lang="bash">apt-get install ruby ruby-dev rails rubygems mongrel mongrel-cluster</pre>После установки gem ставим mongrel<pre lang="bash">#gem install mongrel#gem install mongrel_cluster</pre>Для хранения рельсовых приложений я предпочел использовать централизованное место, поэтому создал директорию **/var/www/rails**.Переходим в эту директорию и создаем тестовое RoR приложение:<pre lang="bash">#rails demo</pre>Генерируем конфигурационный файл для нашего приложения, используя команду mongrel_rails:<pre lang="bash">#cd /var/www/rails/demo#mongrel_rails cluster::configure -e production -p 3000 -N 2 \    -c /var/www/rails/demo -a 127.0.0.1 \    -l log/mongrel.log -P /tmp/demo.pid \    --user www-data --group www-data</pre>_Опции:_-  -e - Rails environment (в данном случае указываем production)
-  -p - Mongrel будет слушать порты начиная с указанного порта до +(N-1) (т.е. в нашем случае порты 3000 и 3001)
-  -N - количестов Mongrel серверов
-  -c - директория в которую перейдет Mongrel сервер перед запуском
-  -a - IP адресс для прослушивания Mongrel сервером
-  -l - лог файл
-  -P - файл в который будет записан PID процесса (с версии mongrel_cluster 1.0.x должен находится в каталоге /var/run/mongrel_cluster/)
-  --user и --group - имя пользователя и группа от имени которых будут запущены Mongrel серверы (я использую www-data, т.к. под этим пользователям работает nginx. Перед запуском необходимо убедится, что данный пользователь имеет права записи в директорию с приложением)
Для получения полной справки можно выполнить команду mongrel_rails cluster::configure -hПосле выполнения этой команды будет создан файл config/mongrel_cluster.yml**Настраиваем nginx.**Допустим мы хотим, чтобы наше RoR приложение было доступно по адресу demo.xxx.com.Для этого изменяем nginx.conf следующим образом (или же создайте отдельный файл конфигурации):В основную конфигурацию сервера добавляем:И добавляем виртуальный хост demo.xxx.com:<pre lang="conf">upstream mongrel {    server 127.0.0.1:3000;    server 127.0.0.1:3001;}server {    listen 80;    server_name demo.xxx.com;    charset off;    location / {        root /var/www/rails/demo;        index index.html index.htm;    }    # / -&gt; first search for local index.html then go to mongrel    location ~ ^/$ {        if (-f /index.html) {            rewrite (.*) /index.html last;        }        proxy_pass http://mongrel;    }    # rails caching: searching first for $action.html local pages    location / {        if (!-f $request_filename.html) {            proxy_pass http://mongrel;        }        rewrite (.*) $1.html last;    }    # serve static files directly    location ~ .html {        root /var/www/rails/demo/public;    }    location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js|mov)$ {        root /var/www/rails/demo/public;    }    # resend everything else to mongrel    location / {        proxy_pass  http://mongrel;        proxy_redirect     off;        proxy_set_header   Host             $host;        proxy_set_header   X-Real-IP        $remote_addr;        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;    }}</pre>Меняем<pre lang="conf">proxy_set_header Host $host;</pre>на<pre lang="conf">proxy_set_header Host $http_host;</pre>если $server_port != 80Перезапускаем сервер:<pre lang="bash">#/etc/init.d/nginx restart</pre>и запускаем mongrel_cluster<pre lang="bash">cd /var/www/rails/demo/mongrel_cluster_ctl start -v -c config/</pre>Для запуска монгрела можно создать скрипт отдельный, что бы он стартовал автоматом при запуске системы. Думаю с этим уже разберетесь :)Все, теперь мы видим по адресу demo.xxx.com стартовую страничку нашего RoR приложения[![d181d0bdd0b8d0bcd0bed0ba](http://leopard.in.ua/wp-content/uploads/2008/12/d181d0bdd0b8d0bcd0bed0ba-300x155.png "d181d0bdd0b8d0bcd0bed0ba")](http://leopard.in.ua/wp-content/uploads/2008/12/d181d0bdd0b8d0bcd0bed0ba.png)
