---
layout: post
title: VIM как Rails IDE
wordpress_id: 987
wordpress_url: http://leopard.in.ua/?p=987
categories:
- Новости
- Ruby
- Ruby on Rails
- vim
tags:
- Ruby
- Ruby on Rails
- vim
---
Очень долго я разрабатываю приложение для веба. Сначала я работал на DreamWeaver, но его функционал был ужасен да еще за него нужно было платить. Немного помытарился я перешол на [Netbeans](http://ru.wikipedia.org/wiki/NetBeans_IDE). Прекрасное IDE, но есть один недостаток - кушать такие IDE память и процессор любят (логично - больше плагинов - больше проблем). Потом я перешол на [Aptana](http://www.aptana.org/). Великолепное IDE. Писать про него можно много. Хоть он тоже любит память и процессор (Eclipse все-таки), но не такой прожорливый как Netbeans. Я работаю на этом IDE по сей день, но в один прекрасный момент мне достался ноутбук с 1.5 одно ядерным процессором и 1 Гб памяти. Работать то можно, но для Aptana такой процессор не сильно нравится - уж часто её приходится "уходить в себя" (зависать на неопределенный интервал времени). И хоть работать возможно, я решил поработать в [Vim](http://www.vim.org/). Сам по себе vim "голый" очень скуд в функционале. И поскольку мы разрабатываем львиную долю проектов на Rails и Ruby, мне нужно было улучшить работу. И к моей радости довольно-таки быстро наткнулся на [набор скриптов](http://github.com/akitaonrails/vimfiles/tree/master) от бразильца Akita on Rails. Он, как я понял, собрал кучу полезных плагинов вместе и чуть-чуть дописал конфиг. Всё, о чём будет говориться ниже верно не только для Ruby, но и для других языков типа C, PHP и прочее, готовые наборы сниппетов (о них далее) в комплекте есть и для них.![](http://leopard.in.ua/wp-includes/js/tinymce/plugins/wordpress/img/trans.gif "Далее…")<!--more-->### Основные фишки этого набора скриптов
1.  FuzzyFinderTexMate — очень удобный поиск файлов в проекте по ctrl+f. К примеру, чтобы найти файл config\routes.rb надо набрать rorb. Или даже и того меньше :)
2. Набор сниппетов из TexMate и некоторое количество своих (в смысле, NERDSnippets). Очень удобно, набираешь vf + TAB — получаешь validates_format_of :&lt;+attribute+&gt;, :with =&gt; /&lt;+regex+&gt;/&lt;+, :on =&gt; :&lt;+create+&gt;, :message =&gt; "&lt;+is invalid+&gt;"+&gt;, где по TAB скачешь между параметрами, заключёнными в &lt;+...+&gt;. Сниппеты есть для всего, чего угодно, их полный список можно посмотреть в папке snippets в директории с файлами кофигурации VIM.
3. Дерево проекта, реализованное с помощью NERDTree. Доступно по \+p (обратный слеш и символ p). Переключение с дерева проекта в окно редактирования кода и обратно осуществляется по ctrl+w и стрелка (куда будет стрелка, туда курсор и перескочет), в самом же дереве o — открыть\закрыть папку\файл, R (shift+r) — обновить дерево и по вопросу(?) довольно внятная справка по горячим клавишам.
4. Подсветка кода (rb, html, rjs, js, erb и т.п.)
5. Возможности из rails.vim типа перехода по gf на файл модели, если курсор стоит на вызове, например, конструктора. Всяческие :Rake, :Rgenerate и т.п.
6. Ну и все возможности и навороты VIM, за которые его так любят :)
Надеюсь, вы уже потираете руки, потому что vim — это очень быстрый, удобный, расширяемый и очень не требовательный к ресурсам компьютера редактор.Добиться всего этого очень просто. Вышеупомянутый Akita собрал всё это в одном проекте на github.### Установка
Linux и Mac:<pre lang="bash">cd ~git clone git://github.com/akitaonrails/vimfiles.git .vimcd .vimgit submodule initgit submodule update</pre>Если же у вас Windows, то в первую очередь надо установить [Exuberant CTags](http://ctags.sourceforge.net/) и [msysGit](http://code.google.com/p/msysgit/downloads/list), после чего проделать следующее:<pre lang="bash">cd %HOME%git clone git://github.com/akitaonrails/vimfiles.gitcd vimfilesgit submodule initgit submodule update</pre>Далее, вы открываете ваш ~/.vimrc (на Windows %HOME%\_vimrc), и вставляете туда следующие строки:<pre lang="bash">source ~/.vim/vimrc "Собственно, подцепить все настройки от Akita"В Windows вместо строчки выше надо вбить %HOME%\vimfiles\vimrccolorscheme vibrantink "Приятная цветовая схема в стиле TexMateset nu "Отображать номер астрокset sw=2 "Заменяет TAB на 2 пробелаset sts=2 "Аналогично, но в случае автоотступаlet g:fuzzy_ignore = "gems/*"</pre>### Послесловие
Собственно, я очень доволен работой этих скриптов и VIM, и теперь на своём основном linux-ноутбуке пересел с Netbeans на VIM. Основные аргументы — удобство в работе (впрочем, оно сравнимо), скорость работы, отсутвие необходимости работать мышью (хотя VIM поддерживает мышь) и скорость загрузки (холодный старт Netbeans — секунд 30).Не обошлось, конечно, и без небольших подводных камней. Чтобы работала вся эта красота нужен VIM собранный с поддержкой Ruby. Проверяется это легко:<pre lang="bash">vim --version | grep ruby</pre>или, если нет grep, то просто vim --version и поискать +ruby (собран с поддержкой) или -ruby (собран без поддержки).На всякий случай скажу, что в TexMate я никогда не работал :)P.S. Еще отмечу очень удобный плагин для перехода между буферами (можно конечно использовать стандартные команды VIM, такие как ls, bn, bp, но можно и более удобным способом). Плагин [Bufexplorer](http://www.vim.org/scripts/script.php?script_id=42 "Bufexplorer") позволяет просмотреть список открытых буферов(файлов), отсортировать их, перейти к нужному и т.п.P.S. P.S. пара скриншотов:[![](http://leopard.in.ua/wp-content/uploads/2010/04/333-300x171.png "333")](http://leopard.in.ua/wp-content/uploads/2010/04/333.png)[![](http://leopard.in.ua/wp-content/uploads/2010/04/444-300x171.png "444")](http://leopard.in.ua/wp-content/uploads/2010/04/444.png)
