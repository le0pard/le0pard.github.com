---
layout: post
title: Хранение PHP сесcий в базе данных
wordpress_id: 323
wordpress_url: http://leopard.in.ua/?p=323
categories:
- PHP
tags:
- PHP
---
Сегодня я Вам поведаю как хранить сесcии для PHP в базе данных. По умолчанию PHP использует для хранения сессий дисковые файлы(одна сессия в один файл, где название файла - session_id). Файл создается, как только новая сессия начинает, и удаляется, когда сессия заканчивается (или истекает). Это совершенно нормально для большинства обстоятельств, но имеет следующие недостатки:1. Если Вы используете разделенный сервер тогда, другие пользователи того сервера могут быть в состоянии получить доступ к вашим файлам сессии, таким образом ставя под угрозу безопасность вашего сайта.
2. Каждый сервер будет иметь собственную директорию для хранения сесcий и, если Вы используете балансировшик нагрузок, то нет никакой гарантии, что следующий запрос придет на тот сервер, где была создана сесия.
3. Было бы трудно для администратора выполнить следующие вопросы: "сколько сессий в настоящее время активно?", "какие пользователи в настоящее время логинятся?"
<!--more-->**1. Создание таблицы**Сначала давайте создадим таблицу для хранения сеcсий. Для mysql<pre lang="sql">CREATE TABLE `php_session` (`session_id` varchar(32) NOT NULL default '',`date_created` datetime NOT NULL default '0000-00-00 00:00:00',`last_updated` datetime NOT NULL default '0000-00-00 00:00:00',`session_data` longtext,PRIMARY KEY  (`session_id`),KEY `last_updated` (`last_updated`)) ENGINE=MyISAM</pre>или для postgresql<pre lang="sql">CREATE TABLE php_session (session_id character varying(32) DEFAULT ''::character varying NOT NULL,date_created timestamp with time zone NOT NULL,last_updated timestamp with time zone NOT NULL,session_data text);ALTER TABLE ONLY php_sessionADD CONSTRAINT php_session_pkey PRIMARY KEY (session_id);</pre>Поля<table border="1" cellspacing="0" cellpadding="0" width="100%"><tbody><tr><td>session_id</td><td>Идентификатор для сесии, первичный ключ.</td></tr><tr><td>session_data</td><td>Поле должно быть достаточно большим что б сохранить $_SESSION данные</td></tr><tr><td>date_created</td><td>Используется что б узнать когда стартовала сесия.</td></tr><tr><td>last_updated</td><td>Используется, что б узнать когда был последний запрос от пользователя. Также это поле будет использоваться для чистки сесии.</td></tr></tbody></table>**2. Создание класа PHP_Session**Создадим класс для работы с сесcиями. Начнем с конструктора<pre lang="php">&lt;?phpclass php_Session extends Default_Table{// ****************************************************************************// class constructor// ****************************************************************************function __construct (){// save directory name of current script$this-&gt;dirname   = dirname(__file__);$this-&gt;dbname    = 'audit';$this-&gt;tablename = 'php_session';} // php_Session</pre>Коротко говоря в конструкторе я инициализирую подключение к базе данных и таблице php_sessionДальше добавим метод open()<pre lang="php">function open ($save_path, $session_name)// open the session.{// do nothingreturn TRUE;} // open</pre>В нем мы ничего не делаем :)<pre lang="php">function close ()// close the session.{if (!empty($this-&gt;fieldarray)) {// perform garbage collection$result = $this-&gt;gc(ini_get('session.gc_maxlifetime'));return $result;} // ifreturn FALSE;} // close</pre>Метод close() вызывается, когда сесcия закрывается, в данном случае просто запускаем чистильшика сесий (метод gc).<pre lang="php">function read ($session_id)// read any data for this session.{$fieldarray = $this-&gt;_dml_getData("session_id='" .addslashes($session_id) ."'");if (isset($fieldarray[0]['session_data'])) {$this-&gt;fieldarray = $fieldarray[0];$this-&gt;fieldarray['session_data'] = '';return $fieldarray[0]['session_data'];} else {return '';  // return an empty string} // if} // read</pre>Метод используется для чтения данных из сесcии. В нашем случае выбираем поле по $session_id из таблицы и возращаем все, что есть в session_data.<pre lang="php">function write ($session_id, $session_data)// write session data to the database.{if (!empty($this-&gt;fieldarray)) {if ($this-&gt;fieldarray['session_id'] != $session_id) {// user is starting a new session with previous data$this-&gt;fieldarray = array();} // if} // ifif (empty($this-&gt;fieldarray)) {// create new record$array['session_id']   = $session_id;$array['date_created'] = getTimeStamp();$array['last_updated'] = getTimeStamp();$array['session_data'] = addslashes($session_data);$this-&gt;_dml_insertRecord($array);} else {// update existing record$array['last_updated'] = getTimeStamp();$array['session_data'] = addslashes($session_data);$this-&gt;_dml_updateRecord($array, $this-&gt;fieldarray);} // ifreturn TRUE;} // write</pre>Метод write() обновляет или же (если ещё данных в сеcсию не поступало) создает ячейку данных в таблице для данных в сесии по $session_id.<pre lang="php">function destroy ($session_id)// destroy the specified session.{$fieldarray['session_id'] = $session_id;$this-&gt;_dml_deleteRecord($fieldarray);return TRUE;} // destroy</pre>Метод destroy() используется для уничтожения сеcсии (в нашем случае удаляем ячейку в таблице по $session_id).<pre lang="php">function __destruct ()// ensure session data is written out before classes are destroyed// (see http://bugs.php.net/bug.php?id=33772 for details){@session_write_close();} // __destruct</pre>На всяк случай деструктор (по ссылочке со старым PHP данный метод не будет работать без этого).<pre lang="php">function gc ($max_lifetime)// perform garbage collection.{$real_now = date('Y-m-d H:i:s');$dt1 = strtotime("$real_now -$max_lifetime seconds");$dt2 = date('Y-m-d H:i:s', $dt1);$count = $this-&gt;_dml_deleteSelection("last_updated &lt; '$dt2'");return TRUE;} // gc</pre>Метод gc используется для чистки сесий (у которых время жизни прошло). Параметр $max_lifetime указывает сколько может существовать сесия (в секундах). В нашем случае мы удаляем запросом по **last_updated &lt; текушее время - $max_lifetime **сесии, у которых TTL уже прошло.Все, наш класс готов. Теперь можем его попытаться использовать<pre lang="php">require_once 'classes/php_session.class.php';$session_class = new php_Session;session_set_save_handler(array(&amp;$session_class, 'open'),array(&$session_class, 'close'),array(&$session_class, 'read'),array(&$session_class, 'write'),array(&$session_class, 'destroy'),array(&$session_class, 'gc'));</pre>Вот, теперь можем дальше оперировать с сесиями как не в чем не бывало. Но теперь в таблице появятся приблизительно такие строчки[![](http://leopard.in.ua/wp-content/uploads/2008/09/123.png "123")](http://leopard.in.ua/wp-content/uploads/2008/09/123.png)Вот и все.**В заключение**Вы увидели, что это - относительно простой процесс, чтобы переключить регистрацию данных сессии от обычных дисковых файлов до базы данных. Это преодолевает недостатки, созданые с обычными дисковыми файлами:1.  Данные сессии более безопасны, поскольку потенциальный хакер должен быть подключен к  базе данных прежде, чем он может получить доступ к чему - нибудь.
2. Использование многократных серверов не создает для нас проблему, поскольку все данные сессии теперь хранятся в единственном центральном месте и доступны всем серверам.
3. Намного легче выбрать из базы данных информацию о текущих сессиях или текущих пользователях.
