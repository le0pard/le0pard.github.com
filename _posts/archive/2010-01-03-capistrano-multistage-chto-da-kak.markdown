---
layout: post
title: ! 'Capistrano: Multistage - что да как'
wordpress_id: 870
wordpress_url: http://leopard.in.ua/?p=870
categories:
- Новости
- Ruby
- Ruby on Rails
- разработка
tags:
- Ruby
- разработка
- Ruby on Rails
---
Уже давно [я писал](http://leopard.in.ua/2009/01/21/mnogokratnoe-razvertyvanie-s-ispolzovaniem-capistrano/) о такой прекрасной утилите как Capistrano. **Capistrano** – это написанная на Ruby утилита, созданная в целях надежного и многократного развертывания Rails-приложений на удаленных серверах (хотя можно разворачивать и не только ROR). Для связи с серверами и выполнения серверных команд в ней используется SSH.Но на сегодня уже деплой приложения только на один сервер может оказаться мало. Бывает, что есть еще, кроме продакшн серверов, тестируемые сервера и еще другие для разных потребностей. Тогда уже одного Capistrano не хватает. Хорошо, что есть Capistrano-ext. Данный плагин позволяет развертывать приложение на разные сервера с разными настройками для них. Что там потребуется?<!--more-->## Сначала:
Установленный rubygems, а с ним плагины rails, capistrano, capistrano-ext.В данном случае я рассматриваю, что приложение находится в Mercurial репозитории. В нашем config/deploy.rb (который мы настроили для capistrano немного внесем правок):<pre lang="ruby">require 'mongrel_cluster/recipes' # Mongrel serverset(:releases) { capture("ls -xt #{releases_path}").split.reverse } # без этого счастья Capistrano наверно работал с релизами приложенияset :stages, %w(stages production) # Наши типы серверовset :default_stage, "production" # Сервер по умолчанию (например при написании cap deploy будет деплоить на него)set :scm, :mercurial # Берем приложение я mercurial репозиторияset :scm_verbose, false # Не нужен подробно при забирании приложении с репизитория писать в консольset :repository,  "ssh://hg@bitbucket.org/here our url/" # Тут доступ к (bitbucket.org в моем случае) mercurial репозиторию по ssh (не забудте про ключи ssh)set :deploy_via, :remote_cache # Храним копию приложения на сервереssh_options[:forward_agent] = true # Опции для sshssh_options[:port] = 22 # Опции для sshdefault_run_options[:pty] = trueset :keep_releases, 5 # Сколько релизов оставлять на сервере (остальные старые будем чистить автоматом при деплое)require 'capistrano/ext/multistage' # Да, вот и подключение capistrano-ext!!!# Дополнительные задания сами тут пишемdesc "Show hostname"task :uname dorun "uname -a"end#this block is fix of strange process/reaper error during deployment.# Задания для рестарта приложения (Phusion Passenger)deploy.task :restart dorun "touch #{current_path}/tmp/restart.txt"endafter "deploy:update_code", "deploy:cleanup" # Чистим после деплоя старые релизи приложения# when code was updated we need to add symlinks to the static data like uploaded files, application configuration and so on...# А тут мы делаем симлин на конфиг database.yml (Не хранить же его в репозитории, да и тем более для разных серверов)after "deploy:update_code" dorun "ln -s #{deploy_to}/#{shared_dir}/config/database.yml #{current_release}/config/database.yml"end</pre>Комментарии в коде должны хоть как то объяснить что да как. Затем поместим конкретные типы конфигов для разных серверов в config/deploy/ . В нашем примере их два - staging.rb и production.rb. Вот и все. Теперь развертываем через "cap staging deploy" и "cap production deploy". Вот пример production.rb:<pre lang="ruby">#all bugs were fixed so lets deploy our application...set :application, "example.com" # Название приложенияset :rails_env, "production" # Наш RAILS_ENV приложенияset :domain, "127.0.0.1" # Домен сервера или его iprole :app, domainrole :web, domainrole :db,  domain, :primary =&gt; trueset :branch, "default" # ветка репозиторияset :app_server, :passenger # сервер - Phusion Passengerset :use_sudo, false # не привилегированный пользователь в системеset :user, 'user' # Логин пользователя на сервере (для ssh)set :password, 'password' # пароль пользователя на сервере (для ssh)set :deploy_to, "/var/www/#{application}" # Куда деплоим на сервере (директория деплоя)</pre>Вроде все. Теперь мы можем разворачивать приложения на несколько серверов :)## На серверах
Как мы помним в конфигах, которые лежат в папке config/deploy/ мы указываем **deploy_to** - это в какую директорию на сервере разворачивать приложение.А в данной папке ДОЛЖНА быть такая структура папок:&lt;CURENT_DIR&gt;- reseases (папка)- shared (папка)-- config (папка)--- database.yml _(Вот наш файл настроек базы данных, на который мы создаем симлинк выше)_-- log (папка)-- pids (папка)-- system (папка)А теперь по порядку.**reseases** - папка, куда сбрасываются наши релизы.**shared** - папка для данных, а именно:**log** - папка с логами, автоматом на нее делается симлинк**pids** - папка с pid-ами Rails, автоматом на нее делается симлинк**system** - папка с файликами, которые доступны с http, автоматом на нее делается симлинк в директорию public (сюда лучше ложить картинки и прочее пользователей сайта)Ну а config/database.yml ми храним настройки доступа к бд на этом сервере. На него потом мы делаем симлинк (выше в deploy.rb).После первого удачного развертывания создастся симлинк current, который будет указывать на текущий релиз приложения. На него (точнее на папку public) и надо настроить веб-сервер. Вот и все.**ЗЫ** Не забываем про файл Capfile в корне Rails приложения с контентом:<pre lang="ruby">load 'deploy' if respond_to?(:namespace) # cap2 differentiatorDir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }load 'config/deploy'</pre>
