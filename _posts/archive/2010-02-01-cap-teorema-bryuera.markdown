---
layout: post
title: CAP-теорема Брюера
wordpress_id: 945
wordpress_url: http://leopard.in.ua/?p=945
categories:
- Новости
- web
- проектирование
tags:
- web
- проектирование
---
По большей части эта статья — изложение сути статьи "[Brewer's CAP Theorem](http://www.julianbrowne.com/article/viewer/brewers-cap-theorem)" Джулиана Брауна. В оригинале много полезных ссылок и интересных примеров, поэтому если позволяет время и знание языка, почитайте его. А здесь у меня просто самая суть, покороче и по-русски.В 2000 году [Эрик Брюер](http://www.cs.berkeley.edu/%7Ebrewer/) выдвинул гипотезу, касающуюся ключевых свойств распределённых систем, которую затем [доказали в MIT](http://people.csail.mit.edu/sethg/pubs/BrewersConjecture-SigAct.pdf), и с тех пор она называется теоремой Брюера или теоремой CAP (Consistency-Availability-Partition tolerance). Вольная формулировка:## <span style="color: #800000;">В распределённой системе невозможно обеспечить одновременное выполнение всех трёх условий: корректности, доступности, устойчивости к сбоям узлов.</span>
Что это за свойства?<!--more-->### <span style="color: #800000;">Корректность (Consistency)</span>
Говорит о том, что система всегда выдаёт только логически непротивречивые ответы. То есть не бывает такого, что вы добавили в корзину товар, а после рефреша страницы его там не видите.### <span style="color: #800000;">Доступность (Availability)</span>
Означает, что сервис отвечает на запросы, а не выдаёт ошибки о том, что он недоступен.### <span style="color: #800000;">Устойчивость к сбоям узлов (Partition tolerance)</span>
Означает, что распределённая по кластеру система продолжает работать корректно при недоступности нескольких серверов кластера (кроме случая, когда упали все сервера, конечно).Для лучшего осознания, вот три соответствующих примера того, что могут представлять собой системы без одного из этих свойств:### <span style="color: #800000;">+Availability +Consistency -Parition tolerance</span>
Система из одного сервера, на котором крутится всё. В ней не может произойти неконсистентностей, и она всегда доступна, пока доступен её единственный сервер. Если он падает, падает вся система.### <span style="color: #800000;">+Consistency +Partition tolerance -Availability</span>
Система с несколькими мастер-базами, которые обновляются синхронно. Она всегда корректна, потому что транзакция отрабатывает, только если изменения удалось распространить по всем серверам БД. Она продолжает корректно работать по крайней мере на чтение, если один из серверов падает. А вот попытки записи будут обрываться или сильно задерживаться, пока система не убедится в своей консистентности.### <span style="color: #800000;">+Availability +Partition tolerance -Consistency</span>
Система с несколькими серверами, каждый из которых может принимать данные, но не обязуется в тот же момент распространять их по всему кластеру. Система переживает падения части серверов, но когда они входят в строй, они будут выдавать пользователям старые данные.Важность того, что невозможность обеспечить все три свойства сразу, доказана математически, избавляет нас (тупых инженеро́в :-) ) от тщетных попыток создать некую идеальную систему, которая [никогда-никогда не ломается](http://softwaremaniacs.org/forum/django/19446/). Вместо этого мы теперь можем делать привычный нам инженерный выбор двух из трёх.<pre>Как в известном предложении клиенту: "быстро, дёшево, качественно — выбирайте любые два".</pre>Причём, как в большинстве инженерных ситуаций, этот выбор не стоит как "всё или ничего". Система может располагаться где угодно в пределах этого воображаемого треугольника, быть "более" консистентной, "менее" доступной и "слегка" неустойчивой. В анти-идеале можно написать систему, у которой будет плохо со всеми тремя компонентами. Уверен, вы с такими встречались :-).Одно из интересных практических следствий этой теоремы в том, что в последнее время многие бизнесы решили для себя, что совсем не обязательно упираться в принципы дизайна [ACID](http://ru.wikipedia.org/wiki/ACID), который ставит во главу угла Consistency, жертвуя двумя другими свойствами. Теперь у нас есть такая альтернатива, как [BASE](http://queue.acm.org/detail.cfm?id=1394128) (известная также как "eventual consistency"), которую например очень любят и используют в Amazon. Там во главе угла стоит Availability.А ещё один дядька — Гай Пардон — вообще предлагает инженерное решение, которое [обходит проблему CAP](http://guysblogspot.blogspot.com/2008/09/cap-solution-proving-brewer-wrong.html). Правда, он немного читерствует (с математикой трудно спорить), говоря, что хоть и нельзя обеспечить все три свойства _одновременно_, можно построить систему так, чтобы она достигала желаемого постепенно.Источник: [Маниакальный Веблог](http://softwaremaniacs.org/blog/)
