---
layout: post
title: Отслеживание истечения срока действия сессий
wordpress_id: 352
wordpress_url: http://leopard.in.ua/?p=352
categories:
- Ajax
- javascript
- Ruby on Rails
tags:
- Ajax
- javascript
- Ruby on Rails
---
Ваше приложение всегда завершает работу с сессией после определенного периода бездействия со стороны пользователя, и вы хотите помочь пользователю сориентироваться, сколько времени осталось до того, как приложение аннулирует их регистрацию.<!--more-->**Решение**Создадим контроллер BankAccountController которая приводит к завершению работы с сессией по истечении десятиминутной пасивности:<pre lang="ruby">class BankAccountController &lt; ApplicationControllerbefore_filter :update_activity_time, :except =&gt; :session_expirydef update_activity_timesession[:expires_at] = 10.minutes.from_nowenddef session_expiry@time_left = (session[:expires_at] - Time.now).to_iunless @time_left &gt; 0reset_sessionrender '/signin/redirect'endendend</pre>Практически перед каждым запросом в нашем приложении мы вызываем метод фильтра update_activity_time. Этот фильтр устанавливает время существования пользовательской сессии на основе периода, прошедшего со времени последнего появления активности со стороны пользователя.В фильтре, запускающем метод update_activity_time, мы не запускаем действие session_expiry. Если вы посмотрите на простое представление, созданного для этого контроллера index.rhtml, то поймете, почему:<pre lang="rails">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /&gt;&lt;title&gt;Session&lt;/title&gt;&lt;%= javascript_include_tag :defaults %&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="header"&gt;&lt;/div&gt;&lt;%= periodically_call_remote :url =&gt; {:action =&gt; 'session_expiry' },:update =&gt; 'header' %&gt;&lt;div id="body"&gt;Тут все приложение.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</pre>Используя метод periodically_call_remote(), мы вызываем действие session_expiry() (по умолчанию каждые 10 секунд), помещая содержимое действия в первоначально пустой &lt;div&gt;-тег, имеющий идентификатор header. Если действие сессии еще не истекло, действие session_expiry() отправляет собственное представление (session_expiry.rhtml):<pre lang="rails">&lt;% if @time_left &lt; 1.minute %&gt;&lt;span style="color:red; font-weight:bold;"&gt;До завершения работы сесии осталось (в сек.) - &lt;%= @time_left %&gt;&lt;/span&gt;&lt;% end %&gt;</pre>Если работа сессии должна завершится менее чем через минуту, представление session_expiry отобразит жирным шрифтом и красным цветом предупреждение, обновляемое каждые десять секунд.[![](http://leopard.in.ua/wp-content/uploads/2008/09/screenshot_4-205x300.png "screenshot_4")](http://leopard.in.ua/wp-content/uploads/2008/09/screenshot_4.png)[![](http://leopard.in.ua/wp-content/uploads/2008/09/screenshot-2_-275x300.png "screenshot-2_")](http://leopard.in.ua/wp-content/uploads/2008/09/screenshot-2_.png)Когда сессия должна завершить работу, session_expiry() перезапустит сессию и вызовет RJS-шаблон, а затем перенаправит браузер по URL, который соответствует окну идентификации пользователя приложения(redirect.rjs):<pre lang="javascript">page &lt;&lt; "window.location = '#{signin_url}';"</pre>Почему используем перенаправление через JavaScript? Почему не стандартный redirect_to()? Получая от Ajax-запроса код ответа 302 HTTP, браузеры не сделают полноценное перенаправление. Поэтому мы и использовали RJS для генерации перенаправления.Вот и все. Удачи в программировании!
