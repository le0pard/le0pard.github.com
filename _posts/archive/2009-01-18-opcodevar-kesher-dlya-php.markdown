---
layout: post
title: Opcode/var кешер для PHP (мое сравнение)
wordpress_id: 688
wordpress_url: http://leopard.in.ua/?p=688
categories:
- PHP
- memcache
tags:
- PHP
- memcache
---
Стал вопрос в выборе opcode/var кешера. Что от него нужно: собственноно кеширование opcode (понимается прекомпиленный и желательно оптимизированный byte код) в память, возможность кеширования в память переменных. Расмотрю то, что мне удалось найти и протестировать.## eAccelerator
[http://eaccelerator.net/](http://eaccelerator.net/)По API больше понравился eAccelerator. API простое - только самое нужное, но есть и такие возможности, которых нет у других - функции блокировки ключа. Он также лучше и удобнее в настройках. Позволяет отдельно управлять хранением ключей, сессий и данных (скомпилированного кода и пользовательских данных). Методы хранения: только в разделяемой памяти, в памяти и на диске одновременно, в памяти с вытеснением на диск и только на диске. Легко и прозрачно можно отделить ключи каждого виртуального сервера в системе, чтобы не было лишних дырок в безопасности и пересечения ключей, установкой уникального значения параметра eaccelerator.name_space для каждого виртуального сервера. Против ожидания, что нагрузка на процессор и память возрастет, наблюдаю, наоборот, снижение за счет меньшей нагрузки на базу данных. При длительной эксплуатации загонял процесс в lock (обидно).**_Плюсы:_**По сторонним тестам самый шустрый (ИМХО - согласен);**_Минусы:_**На продакшн-сервере после n едниц времени работы загонял процесс в lock;<!--more-->## APC
[http://www.php.net/apc](http://www.php.net/apc)APC очень обилен в настройках. Настроек тоже много. API очень маленькое. Интересная функция - сохранение массива и восстановление его как набора констант. Редкая по нужности функция.**_Плюсы:_**Продвинутый, но не так как в XCache, admin интерфейс;Входит в состав PECL;**_Минусы:_**Чуть медленнее XCache;Он [сакс](http://www.joomlaperformance.com/articles/performance/why_apc_sucks_and_should_be_pulled_from_pecl_53_14.html);## XCache
[http://xcache.lighttpd.net/](http://xcache.lighttpd.net/)После eAccelrator и APC XCache ничем хорошим не удивил. Слабоватая документация по API, хотя для базовых функций даны примеры, и то хорошо. API простое. Из особенностей: возможность выполнять инкремент и декремент числового значения в кэше и функция проверки наличия ключа в кэше без пересылки самого значения. Настроек довольно мало. Удивило то, что кэширование по умолчанию разрешено, но размер используемой памяти и максимальные размеры пользовательских объектов равны нулю, что по документации означает "запрещено". Есть система чтобы обезопасить память, в которую он кеширует (Read-only protection).**_Плюсы:_**Поддержка наиболее свежих версий PHP;Незначительное (около 3%) превосходство над APC;Продвинутый admin интерфейс;Есть интерфейс для работы в составе Zend_Framework;Стабильность (если верить автору);**_Минусы:_**// пустоТакже, хочу вспомнить про ещё один кеширующий элемент, но он не кеширует opcode, но может кешировать все что вы пожелаете в памяти (переменные, страницы и прочее).## Memcache
[http://www.php.net/memcache](http://www.php.net/memcache)Memcache минималистичен в настройках, так как настройки управления кэшированием находятся на стороне сервера memcached. API у него посложнее, чем у первых трех систем, и поддерживает работу в процедурном и ООП способах. Из особенностей: помимо функции установки значения по ключу есть возможность добавить ключ, только если его еще нет, и перезаписать, только если он уже есть. Может иметь несколько кэширующих серверов: как на том же хосте, так и на других. Как я понял, суть Memcache - в использовании ресурсов других хостов. По моему мнению, это несколько устарело: если ресурсов одного хоста не хватает, то лучше найти другой способ распределить нагрузку, чем коммуникация по TCP с кэширующими серверами на других хостах, что вносит существенную задержку.## Итог
Хочу заметить от себя, что самый шустрый оказался по моим тестам eAccelerator, но на рабочей системе он вганял процесы в lock. Поэтому пришлось его вырубить и заменить на <span id="post_p1"><span id="post_p2"><span id="post_p2_1"><span id="post_p2_2"><span id="post_p2_3"><span id="post_p2_4"><span id="post_p3"><span id="post_p4"><span id="post_p4_1"><span id="post_p4_2"><span id="post_p4_3">XCache</span></span></span></span></span></span></span></span></span></span></span>. <span id="post_p1"><span id="post_p2"><span id="post_p2_1"><span id="post_p2_2"><span id="post_p2_3"><span id="post_p2_4"><span id="post_p3"><span id="post_p4"><span id="post_p4_1"><span id="post_p4_2"><span id="post_p4_3">XCache</span></span></span></span></span></span></span></span></span></span></span> оказался чуть медленнее, но работает тоже хорошо, и пока стабильно на продакшан сервере. Memcache тоже отлично работает как кеширователь страниц и переменных (скорость работы его тоже очень велика, и не удивительно, ведь memcached - отдельный сервер). APC даже не испытывал, поскольку как и было указано сакс (если не прав - поправите меня).<span id="post_p1"><span id="post_p2"><span id="post_p2_1"><span id="post_p2_2"><span id="post_p2_3"><span id="post_p2_4"><span id="post_p3"><span id="post_p4"><span id="post_p4_1"><span id="post_p4_2"><span id="post_p4_3">ИМХО, в лидерах - eAccelerator и XCache (для кеширования </span></span></span></span></span></span></span></span></span></span></span>opcode<span id="post_p1"><span id="post_p2"><span id="post_p2_1"><span id="post_p2_2"><span id="post_p2_3"><span id="post_p2_4"><span id="post_p3"><span id="post_p4"><span id="post_p4_1"><span id="post_p4_2"><span id="post_p4_3">). APC работает в несколько раз медленнее, чем eAccelerator. А </span></span></span></span></span></span></span></span></span></span></span>Memcache неплохо использовать для дополнительного кеширования.Все. Удачи!
